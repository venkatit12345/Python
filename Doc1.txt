Data Types

Variables can hold values of different data types. Python is a dynamically typed language hence we need not define the type of the variable while declaring it. The interpreter implicitly binds the value with its type.

Python enables us to check the type of the variable used in the program. Python provides us the type() function which returns the type of the variable passed.

A=10  
b="Hi Python"  
c = 10.5  
print(type(a));   
print(type(b));   
print(type(c));  

Standard data types

A variable can hold different types of values. For example, a person?s name must be stored as a string whereas its id must be stored as an integer.

Python provides various standard data types that define the storage method on each of them. The data types defined in Python are given below.

Numbers
String
List
Tuple
Dictionary

Numbers
Number stores numeric values. Python creates Number objects when a number is assigned to a variable. For example;

a = 3 , b = 5  #a and b are number objects  

Python supports 4 types of numeric data.

int (signed integers like 10, 2, 29, etc.)
long (long integers used for a higher range of values like 908090800L, -0x1929292L, etc.)
float (float is used to store floating point numbers like 1.9, 9.902, 15.2, etc.)
complex (complex numbers like 2.14j, 2.0 + 2.3j, etc.)
Python allows us to use a lower-case L to be used with long integers. However, we must always use an upper-case L to avoid confusion.

A complex number contains an ordered pair, i.e., x + iy where x and y denote the real and imaginary parts respectively).

String

The string can be defined as the sequence of characters represented in the quotation marks. In python, we can use single, double, or triple quotes to define a string.

String handling in python is a straightforward task since there are various inbuilt functions and operators provided.

In the case of string handling, the operator + is used to concatenate two strings as the operation "hello"+" python" returns "hello python".

The following example illustrates the string handling in python.

str1 = 'hello javatwelcome' #string str1  
str2 = ' how are you' #string str2  
print (str1[0:2]) #printing first two character using slice operator  
print (str1[4]) #printing 4th character of the string  
print (str1*2) #printing the string twice  
print (str1 + str2) #printing the concatenation of str1 and str2  

List

Lists are similar to arrays in C. However; the list can contain data of different types. The items stored in the list are separated with a comma (,) and enclosed within square brackets [].
We can use slice [:] operators to access the data of the list. The concatenation operator (+) and repetition operator (*) works with the list in the same way as they were working with the strings.

Consider the following example.

l  = [1, "hi", "python", 2]  
print (l[3:]);  
print (l[0:2]);  
print (l);  
print (l + l);  
print (l * 3);   

Tuple

A tuple is similar to the list in many ways. Like lists, tuples also contain the collection of the items of different data types. The items of the tuple are separated with a comma (,) and enclosed in parentheses ().

A tuple is a read-only data structure as we can't modify the size and value of the items of a tuple.

Let's see a simple example of the tuple.

t  = ("hi", "python", 2)  
print (t[1:]);  
print (t[0:1]);  
print (t);  
print (t + t);  
print (t * 3);   
print (type(t))  
t[2] = "hi";  

Dictionary

Dictionary is an ordered set of a key-value pair of items. It is like an associative array or a hash table where each key stores a specific value. Key can hold any primitive data type whereas value is an arbitrary Python object.

The items in the dictionary are separated with the comma and enclosed in the curly braces {}.

Consider the following example.

d = {1:'Jimmy', 2:'Alex', 3:'john', 4:'mike'};   
print("1st name is "+d[1]);  
print("2nd name is "+ d[4]);  
print (d);  
print (d.keys());  
print (d.values());  